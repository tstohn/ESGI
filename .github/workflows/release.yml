name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            ostag: linux-x86_64
          - os: macos-13
            ostag: macos-x86_64
            mac_arch: x86_64
          - os: macos-14
            ostag: macos-arm64
            mac_arch: arm64
          - os: windows-2022
            ostag: windows-x86_64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Provide vcpkg for your Makefile's 'make install' on Windows
      - name: Install vcpkg (Windows)
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          if (!(Test-Path 'C:\vcpkg')) {
            git clone https://github.com/microsoft/vcpkg C:\vcpkg
            C:\vcpkg\bootstrap-vcpkg.bat
          }

      # Linux/macOS build (keeps 'make install' exactly as in your Makefile)
      - name: Build (Linux/macOS)
        if: matrix.os != 'windows-2022'
        run: |
          make clean
          # Add arch flags for mac builds
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            export CFLAGS="-arch ${{ matrix.mac_arch }} -mmacosx-version-min=11.0"
            export CXXFLAGS="$CFLAGS"
            export LDFLAGS="-arch ${{ matrix.mac_arch }}"
          fi
          make install
          make demultiplex count esgi annotate

      # Windows build via MSYS2 so your Makefile runs unchanged
      - name: MSYS2 setup (Windows)
        if: matrix.os == 'windows-2022'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            git
            make
            mingw-w64-x86_64-gcc
            zip

      - name: Build (Windows)
        if: matrix.os == 'windows-2022'
        shell: msys2 {0}
        env:
          VCPKG_ROOT: /c/vcpkg
        run: |
          make clean
          make install
          # No annotate on Windows
          make demultiplex count esgi

      # ---------- NEW PACKAGING: one zip per OS with whole repo + bin ----------
      - name: Package (Linux/macOS) — repo + bin
        if: matrix.os != 'windows-2022'
        run: |
          set -e
          VER="${GITHUB_REF_NAME#v}"
          NAME="esgi-${VER}-${{ matrix.ostag }}"
          mkdir -p dist pkg
          # Export clean tree of current commit (no .git, no previous build junk)
          git archive --format=tar HEAD | tar -x -C pkg
          # Ensure bin exists and copy built binaries (if any)
          mkdir -p pkg/bin
          if ls bin/* >/dev/null 2>&1; then
            cp -a bin/* pkg/bin/ || true
          fi
          # Zip the whole exported repo tree (with bin/)
          ( cd pkg && zip -r ../dist/${NAME}.zip . )
          # Clean staging dir
          rm -rf pkg

      - name: Package (Windows) — repo + bin
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $ProgressPreference = "SilentlyContinue"
      
          $ver  = $env:GITHUB_REF_NAME.TrimStart('v')
          $name = "esgi-$ver-${{ matrix.ostag }}"
      
          New-Item -ItemType Directory -Path dist,pkg -Force | Out-Null
      
          # Export clean repo tree (no .git) as ZIP, then expand it -> pkg\
          git archive --format=zip -o repo.zip HEAD
          Expand-Archive repo.zip -DestinationPath pkg -Force
          Remove-Item repo.zip -Force
      
          # Ensure bin exists and copy built binaries (if any)
          New-Item -ItemType Directory -Path pkg\bin -Force | Out-Null
          if (Test-Path bin) {
            Copy-Item -Path bin\* -Destination pkg\bin -Recurse -Force
          }
      
          # Create final per-OS zip containing whole repo + bin/
          Compress-Archive -Path pkg\* -DestinationPath ("dist\$name.zip") -Force
      
          # Cleanup
          Remove-Item -Recurse -Force pkg

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ostag }}
          path: dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.zip > SHA256SUMS.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*
